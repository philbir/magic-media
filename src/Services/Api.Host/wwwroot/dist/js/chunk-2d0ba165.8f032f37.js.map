{"version":3,"sources":["webpack:///./node_modules/vue-keypress/src/index.vue","webpack:///node_modules/vue-keypress/src/index.vue","webpack:///./node_modules/vue-keypress/src/index.vue?56b6"],"names":["render","staticRenderFns","props","keyEvent","type","String","default","keyCode","Number","modifiers","Array","preventDefault","Boolean","multipleKeys","data","mounted","this","setupListeners","destroyed","methods","addEventListener","expectedEvent","window","listener","keyListeners","push","eventHandler","event","message","emitResponse","inAnyKeyMode","inMultipleKeysMode","expectedInputs","component"],"mappings":"2JAAIA,EAAQC,E,wBCCZ,4CAEA,GACEC,MAAO,CACLC,SAAU,CACRC,KAAMC,OACNC,QAAS,SAIXC,QAAS,CACPH,KAAMI,OACNF,QAAS,MAEXG,UAAW,CACTL,KAAMM,MACNJ,QAAS,WAAf,WAEIK,eAAgB,CACdP,KAAMQ,SAIRC,aAAc,CACZT,KAAMM,MACNJ,QAAS,WAAf,YAGEQ,KAAM,WAAR,OACA,kBAEEC,QA7BF,WA8BIC,KAAKC,kBAEPC,UAhCF,WAgCA,uBACA,mBADA,IACA,oEACA,iCAFA,gCAKEC,QAAS,CAGPF,eAHJ,WAIM,IAAN,GACQd,SAAUa,KAAKb,SAGfI,QAASS,KAAKT,QACdI,eAAgBK,KAAKL,eACrBF,UAAWO,KAAKP,UAEhBI,aAAcG,KAAKH,cAErBG,KAAKI,iBAAiBC,IAExBD,iBAhBJ,SAgBA,GACM,IAAN,uBACME,OAAOF,iBAAiBC,EAAclB,SAAUoB,GAChDP,KAAKQ,aAAaC,KAAK,CAA7B,8BAKIC,aAxBJ,SAwBA,cACM,OAAO,SAAb,GACQ,IAAR,gBACU,EAAV,SACYC,MAAZ,EACYN,cAAZ,EACYO,QAAZ,KAIQC,EAAa,MAAO,wBAEpB,IAAR,0BAGA,iBACQ,GAAIC,EACFD,EAAa,UAAW,4BAD1B,CAMA,IAAR,MACYE,IACFC,EAAiBX,EAAcR,cAvBzC,uBA0BA,GA1BA,yBA0BA,EA1BA,QA4BA,wBACA,uBAGA,2BAGA,MACA,eACA,0DAEA,uBAUA,OAJA,kBACA,mBAEA,uCACA,YAvBA,kGA1BA,8BAqDQgB,EAAa,QAAS,6BAI5B7B,OAAQ,WAAV,cC1H8Q,I,YFO1QiC,EAAY,eACd,EACAjC,EACAC,GACA,EACA,KACA,KACA,MAIa,aAAAgC,E","file":"js/chunk-2d0ba165.8f032f37.js","sourcesContent":["var render, staticRenderFns\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\nconst supportedModifiers = ['altKey', 'metaKey', 'ctrlKey', 'shiftKey']\n\nexport default {\n  props: {\n    keyEvent: {\n      type: String,\n      default: 'keyup',\n    },\n\n    // Only for single key code:\n    keyCode: {\n      type: Number,\n      default: null,\n    },\n    modifiers: {\n      type: Array, // ['shiftKey', 'ctrlKey', 'altKey', 'metaKey']\n      default: () => [],\n    },\n    preventDefault: {\n      type: Boolean,\n    },\n\n    // Only for multiple key codes:\n    multipleKeys: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data: () => ({\n    keyListeners: [],\n  }),\n  mounted() {\n    this.setupListeners()\n  },\n  destroyed() {\n    for (const { keyEvent, listener } of this.keyListeners) {\n      window.removeEventListener(keyEvent, listener)\n    }\n  },\n  methods: {\n    /** Initial Setup of the listeners */\n    /** ****************************** */\n    setupListeners() {\n      const expectedEvent = {\n        keyEvent: this.keyEvent,\n\n        // If single:\n        keyCode: this.keyCode,\n        preventDefault: this.preventDefault,\n        modifiers: this.modifiers,\n        // If multiple:\n        multipleKeys: this.multipleKeys,\n      }\n      this.addEventListener(expectedEvent)\n    },\n    addEventListener(expectedEvent) {\n      let listener = this.eventHandler(expectedEvent)\n      window.addEventListener(expectedEvent.keyEvent, listener)\n      this.keyListeners.push({ expectedEvent, listener })\n    },\n\n    /** Handling per keypress event */\n    /** *************************** */\n    eventHandler(expectedEvent) {\n      return (event) => {\n        const emitResponse = (emitEvent, message) => {\n          this.$emit(emitEvent, {\n            event,\n            expectedEvent,\n            message,\n          })\n        }\n        // Emit the emitEvent '@any' in any case:\n        emitResponse('any', 'Any key was pressed.')\n\n        const inMultipleKeysMode = expectedEvent.multipleKeys.length > 0\n\n        // In \"any key\" mode, emit '@success' and return\n        const inAnyKeyMode = !expectedEvent.keyCode && !inMultipleKeysMode\n        if (inAnyKeyMode) {\n          emitResponse('success', 'Any key was pressed.')\n          return\n        }\n\n        // Set expected inputs array respective to props bein \"single\" or \"multiple\"\n        let expectedInputs = [expectedEvent]\n        if (inMultipleKeysMode) {\n          expectedInputs = expectedEvent.multipleKeys\n        }\n\n        for (const expectedInput of expectedInputs) {\n          // Check if the correct keys have been clicked:\n          const correctKeyPressed = expectedInput.keyCode === event.keyCode\n          if (!correctKeyPressed) continue\n\n          // Get modifiers:\n          let hasModifiers = expectedInput.modifiers.length > 0\n\n          // Check if only the specified modifiers were pressed\n          if (hasModifiers) {\n            const modifiersPressed = supportedModifiers.every(\n              (x) => event[x] == (expectedInput.modifiers.indexOf(x) !== -1)\n            )\n            if (!modifiersPressed) continue\n          }\n\n          // SUCCESS -> if it got to here, this was the correct key.\n\n          // Set Prevent-Default\n          if (expectedEvent.preventDefault) {\n            event.preventDefault()\n          }\n          emitResponse('success', 'Correct key(s) pressed.')\n          return\n        }\n\n        // FAILURE: If it got to here, the correct key wasn't pressed:\n        emitResponse('wrong', 'Wrong key(s) pressed.')\n      }\n    },\n  },\n  render: () => null,\n}\n</script>","import mod from \"-!../../cache-loader/dist/cjs.js??ref--12-0!../../thread-loader/dist/cjs.js!../../babel-loader/lib/index.js!../../cache-loader/dist/cjs.js??ref--0-0!../../vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../cache-loader/dist/cjs.js??ref--12-0!../../thread-loader/dist/cjs.js!../../babel-loader/lib/index.js!../../cache-loader/dist/cjs.js??ref--0-0!../../vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\""],"sourceRoot":""}