apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: magic-media
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  owner: devs
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: media-db
  labels:
    databaseType: mongo
spec:
  type: database
  owner: devs
  system: magic-media
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: rabbit-mq
spec:
  type: message-queue
  owner: devs
  system: magic-media
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: magic-media-core
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - dotnet
spec:
  type: service
  owner: devs
  system: magic-media
  lifecycle: production
  dependsOn:
    - resource:media-db
    - component:magic-media-face
  providesApis:
    - magic-media-graphql
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: magic-media-graphql
  tags:
    - hotchocolate
spec:
  type: grapqhql
  owner: devs
  system: magic-media
  lifecycle: production
  dependsOn:
    - resource:media-db
  definition: |
    schema {
      query: Query
      mutation: Mutation
    }

    type Query {
      searchMedia(request: SearchMediaRequestInput!): [Media!]!
      mediaById(id: Uuid!): Media!
      searchFaces(request: SearchFacesRequestInput!): [MediaFace!]!
    }

    type Mutation {
      assignPersonByHuman(input: AssignPersonByHumanInput!): UpdateFacePayload!
      approveFaceComputer(id: Uuid!): UpdateFacePayload!
      deleteFace(id: Uuid!): DeleteFacePayload!
    }

    type Media {
      thumbnail(size: ThumbnailSizeName! = M): MediaThumbnail
      camera: Camera
      faces: [MediaFace]
      id: Uuid!
      mediaType: MediaType!
      filename: String
      size: Long!
      source: MediaSource
      originalHash: String
      uniqueIdentifier: String
      imageUniqueId: String
      dateTaken: DateTime
      geoLocation: GeoLocation
      dimension: MediaDimension
      faceCount: Int!
      folder: String
      isFavorite: Boolean!
      format: String
      videoInfo: VideoInfo
      cameraId: Uuid
      objectCount: Int
    }

    type MediaFace {
      person: Person
      id: Uuid!
      mediaId: Uuid!
      box: ImageBox
      thumbnail: MediaThumbnail
      personId: Uuid
      recognitionType: FaceRecognitionType!
      state: FaceState!
      falsePositivePersons: [Uuid!]
      distanceThreshold: Float
      encoding: [Float!]
      age: Int
    }

    type MediaThumbnail {
      dataUrl: String
      id: Uuid!
      size: ThumbnailSizeName!
      dimensions: MediaDimension
      format: String
    }

    type Camera {
      id: Uuid!
      make: String
      model: String
      title: String
    }

    enum MediaType {
      IMAGE
      VIDEO
    }

    type MediaSource {
      type: String
      identifier: String
      importedAt: DateTime!
    }

    type GeoLocation {
      point: GeoPoint
      altitude: Int!
      type: String
      geoHash: String
      address: GeoAddress
    }

    type MediaDimension {
      height: Int!
      width: Int!
    }

    type VideoInfo {
      format: String
      frameRate: Float!
      bitrate: Float!
    }

    enum ThumbnailSizeName {
      XS
      S
      M
      L
      SQ_XS
      SQ_S
    }

    type Person {
      id: Uuid!
      userId: Uuid
      name: String
      group: String
      dateOfBirth: DateTime
    }

    type ImageBox {
      bottom: Int!
      left: Int!
      right: Int!
      top: Int!
    }

    enum FaceRecognitionType {
      NONE
      COMPUTER
      HUMAN
    }

    enum FaceState {
      NEW
      PREDICTED
      VALIDATED
    }

    type GeoAddress {
      name: String
      city: String
      countryCode: String
      country: String
      address: String
      distric1: String
      distric2: String
      entityType: String
    }

    type GeoPoint {
      type: String
      coordinates: [Float!]
    }

    input AssignPersonByHumanInput {
      faceId: Uuid!
      personName: String!
    }

    type DeleteFacePayload {
      id: Uuid!
      errors: [UserError!]
    }

    type UpdateFacePayload {
      face: MediaFace!
      errors: [UserError!]
    }

    input SearchFacesRequestInput {
      states: [FaceState!]
    }

    input SearchMediaRequestInput {
      thumbnailSize: ThumbnailSizeName!
    }

    type UserError {
      message: String!
      code: String!
    }

    "The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
    directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

    "The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
    directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: magic-media-web
  tags:
    - typescript
    - vuejs
  links:
    - url: https://family.magic-media.io
      title: Photos
      icon: dashboard
spec:
  type: website
  owner: devs
  system: magic-media
  lifecycle: production
  dependsOn:
    - component:magic-media-core
    - component:magic-media-face
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: magic-media-worker
  tags:
    - dotnet
spec:
  type: worker
  owner: devs
  system: magic-media
  lifecycle: production
  dependsOn:
    - resource:media-db
    - resource:rabbitMQ
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: magic-media-face
  tags:
    - python
spec:
  type: service
  owner: devs
  system: magic-media
  lifecycle: production
  dependsOn:
    - resource:media-db
